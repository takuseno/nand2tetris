// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isa);
    Not(in=isa, out=isc);

    // A Register
    And(a=isc, b=instruction[5], out=usealuout);
    Mux16(a[0..14]=instruction[0..14], b[0..15]=aluout, sel=usealuout, out[0..15]=aluinstout);
    And(a=isc, b=instruction[5], out=awrite);
    Or(a=isa, b=awrite, out=aload);
    ARegister(in[0..15]=aluinstout, load=aload, out[0..15]=aout, out[0..14]=addressM);

    // A Register or Memory
    Mux16(a[0..15]=aout, b[0..15]=inM, sel=instruction[12], out=mout);

    // ALU
    And(a=instruction[4], b=isc, out=dload);
    DRegister(in[0..15]=din, load=dload, out[0..15]=dout);
    ALU(
        x[0..15]=dout,
        y[0..15]=mout,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out[0..15]=aluout,
        out[0..15]=din,
        out[0..15]=outM,
        zr=aluzr,
        ng=alung
    );

    // connect to writeM
    And(a=instruction[3], b=isc, out=writeM);

    // PC
    Not(in=alung, out=alups);
    Not(in=aluzr, out=alunonzr);
    And(a=alunonzr, b=alups, out=gt);
    And(a=alunonzr, b=alung, out=lt);
    And(a=instruction[0], b=gt, out=jgt);
    And(a=instruction[1], b=aluzr, out=eq);
    And(a=instruction[2], b=lt, out=jlt);
    Or(a=jgt, b=eq, out=tmpjmpcond);
    Or(a=tmpjmpcond, b=jlt, out=tmpjmpcond2);
    And(a=isc, b=tmpjmpcond2, out=jmpcond);
    Not(in=jmpcond, out=inc);
    PC(in[0..15]=aout, load=jmpcond, reset=reset, inc=inc, out[0..14]=pc);
}
